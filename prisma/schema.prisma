// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_MAC_PRO")
  // url      = env("DATABASE_URL_MAC_AIR")
}

model Agency {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  customers   Customer[]
  suppliers   Supplier[]
  transports  Transport[]
  billEntries BillEntry[]
  payments    Payment[]
  banks       Bank[]
  debitNotes  DebitNote[]
}

model Customer {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(50)
  address String @db.Text
  city    String @db.VarChar(25)
  gst     String @db.VarChar(16)
  phone   String @db.VarChar(20)

  agencyId Int    @default(1) // Temporary default value
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  bills BillEntry[]
}

model Supplier {
  id         Int    @id @default(autoincrement())
  name       String @db.VarChar(50)
  address    String @db.Text
  city       String @db.VarChar(25)
  gst        String @db.VarChar(16)
  phone      String @db.VarChar(20)
  commission String @db.VarChar(5)

  agencyId Int    @default(1) // Temporary default value
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  bills BillEntry[]
}

model Transport {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  agencyId Int    @default(1) // Temporary default value
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  bills      BillEntry[]
  debitNotes DebitNote[]
}

model BillEntry {
  id         Int      @id @default(autoincrement())
  billDate   DateTime @db.Date()
  billNumber String   @db.VarChar(20)

  customerId Int      @db.Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  supplierId Int      @db.Int
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  productQty Int
  lrNumber   String   @db.VarChar(20)
  lrDate     DateTime @db.Date()

  transportId Int       @db.Int
  transport   Transport @relation(fields: [transportId], references: [id], onDelete: Cascade)

  agencyId Int    @default(1) // Temporary default value
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  freight   Float
  netAmount Float

  taxType     String @db.VarChar(10)
  grossAmount Float

  payments   Payment[]
  debitNotes DebitNote[]
}

model Payment {
  id Int @id @default(autoincrement())

  date DateTime @db.Date()

  billEntryId Int       @db.Int
  billEntry   BillEntry @relation(fields: [billEntryId], references: [id], onDelete: Cascade)

  transactionAmount Float

  bankId Int?  @db.Int
  bank   Bank? @relation(fields: [bankId], references: [id], onDelete: Cascade)

  agencyId Int    @default(1) // Temporary default value
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  mode            String  @db.VarChar(10)
  referenceNumber String? @db.VarChar(30)

  additionalNote String? @db.Text
}

model Bank {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)

  agencyId Int    @default(1) // Temporary default value
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  payments Payment[]
}

model DebitNote {
  id Int @id @default(autoincrement())

  date DateTime @db.Date()

  billEntryId Int       @db.Int
  billEntry   BillEntry @relation(fields: [billEntryId], references: [id], onDelete: Cascade)

  productQty  Int
  lrNumber    String   @db.VarChar(20)
  lrDate      DateTime @db.Date()

  transportId Int      @db.Int
  transport   Transport @relation(fields: [transportId], references: [id], onDelete: Cascade)

  agencyId Int    @default(1) // Temporary default value
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  returnAmount Float
  taxType      String @db.VarChar(10)

  additionalNote String? @db.Text
}
